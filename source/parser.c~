#include <parser.h>
#include <globals.h>


#define neof()          (now(parser).kind != TOKEN_EOS)
#define match(tok)      (now(parser).kind == tok)
#define advance()       parser->cursor++;

Token peek(Parser* parser);
Token now(Parser* parser);
Token before(Parser* parser);
Token look_ahead(Parser* parser, size_t n);

Expr* parse_expr(Parser* parser);
Expr* parse_atom(Parser* parser);

Stmt* parse_function(Parser* parser);

Token peek(Parser* parser) {
    if (parser->cursor + 1 >= parser->tokens->count) {
	// EOS
	return tl_get(parser->tokens, parser->tokens->count - 1);
    }
    return tl_get(parser->tokens, parser->cursor + 1);
}

Token now(Parser* parser) {
    if (parser->cursor >= parser->tokens->count) {
	return tl_get(parser->tokens, parser->tokens->count - 1);
    }
    return tl_get(parser->tokens, parser->cursor);
}

Token before(Parser* parser) {
    if (parser->cursor - 1 <= 0) {
	return tl_get(parser->tokens, parser->tokens->count - 1);
    }
    return tl_get(parser->tokens, parser->cursor - 1);
}

Token look_ahead(Parser* parser, size_t n) {
    if (parser->cursor + n >= parser->tokens->count) {
	return tl_get(parser->tokens, parser->tokens->count - 1);
    }
    return tl_get(parser->tokens, parser->cursor + n);
}

Parser* kudo_parser_init(TokenList* tokens, Nob_String_Builder sb) {
    Parser* parser = NEW(Parser);
    parser->source = sb;
    parser->tokens = tokens;
    parser->cursor = 0;
    list_Stmt_init(&parser->parsed_program);
    
    return parser;
}

void kudo_parser_parse(Parser* parser) {
    while (neof()) {
	if (match(TOKEN_FUNC)) {
	    Stmt* func_stmt = parse_function(parser);
	}
    }
}

Stmt* parse_function(Parser* parser) {
    Stmt* func_stmt = NEW(Stmt);
    return func_stmt;
}
